Importing Theano...
ERROR (theano.gpuarray): Could not initialize pygpu, support disabled
Traceback (most recent call last):
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gpuarray/__init__.py", line 164, in <module>
    use(config.device)
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gpuarray/__init__.py", line 151, in use
    init_dev(device)
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gpuarray/__init__.py", line 66, in init_dev
    avail = dnn.dnn_available(name)
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gpuarray/dnn.py", line 174, in dnn_available
    if not dnn_present():
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gpuarray/dnn.py", line 165, in dnn_present
    dnn_present.msg)
RuntimeError: You enabled cuDNN, but we aren't able to use it: cannot compile with cuDNN. We got this error:
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated
ld: library not found for -lcudnn
clang: error: linker command failed with exit code 1 (use -v to see invocation)

/Users/mac/anaconda/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
*************** test the format of dataset ***************
<dataset.Dataset instance at 0x110dc0758>
[0, 255]
<network.Network object at 0x110dcf150>
<network.Network object at 0x116240c50>
Setting up Theano...
Saving results to results/003-celeb128-progressive-growing
Compiling training funcs...
******* test minibatch
[[[[ 76 152 101  90]
   [117 178 120  65]
   [155 216 133  34]
   [141 174  64  33]]

  [[ 42  99  57  60]
   [ 69 110  68  36]
   [ 82 136  74  22]
   [ 75  93  34  21]]

  [[ 38  80  47  48]
   [ 55  88  54  31]
   [ 62 106  59  25]
   [ 57  70  34  24]]]


 [[[ 87 207 180  59]
   [ 56 227 212 162]
   [ 51 200 244 183]
   [ 39  98 211 194]]

  [[ 64 177 144  31]
   [ 29 196 173 116]
   [ 24 167 210 128]
   [  9  65 164 140]]

  [[ 71 164 136  32]
   [ 26 183 163 100]
   [ 22 154 195 110]
   [ 14  63 148 123]]]


 [[[195 140 207  98]
   [ 84 156 167 167]
   [ 82 193 217 184]
   [ 66 169 218 149]]

  [[188 102 159  72]
   [ 70 113 124 124]
   [ 64 132 153 124]
   [ 47 119 159 102]]

  [[189  84 133  60]
   [ 64  95 106 100]
   [ 55 110 127  99]
   [ 39 101 131  78]]]


 ...


 [[[108 184 195 135]
   [ 99 189 202 147]
   [ 69 202 217  89]
   [ 61 174 201  94]]

  [[ 83 135 143 108]
   [ 69 135 145 106]
   [ 42 136 149  59]
   [ 14 106 131  36]]

  [[ 55  93  98  73]
   [ 43  97 106  68]
   [ 25  95 107  37]
   [  6  69  87  24]]]


 [[[142 164 144 121]
   [125 157 154 135]
   [124 178 183 141]
   [111 158 154 143]]

  [[128 112  92  89]
   [ 87  96  97  90]
   [ 77  97 110  89]
   [ 72  86  92  92]]

  [[121  71  57  54]
   [ 61  57  62  49]
   [ 47  59  76  49]
   [ 42  46  60  44]]]


 [[[ 83  95  87 152]
   [113 146 184 115]
   [ 87 241 214 115]
   [ 33 217 117  81]]

  [[ 52  51  60 149]
   [ 78  99 154  98]
   [ 66 204 184  89]
   [ 23 181  92  50]]

  [[ 51  51  59 140]
   [ 66  78 139  79]
   [ 71 191 170  67]
   [ 42 168  93  48]]]]
[]
******* test minibatch
[[[[ 92  39 153  54]
   [ 28 140 203 109]
   [ 39 201 215  89]
   [ 10 148 169  22]]

  [[ 90  31 121  48]
   [ 25 102 155  81]
   [ 23 138 159  69]
   [  8  89 115  23]]

  [[ 85  25  96  38]
   [ 21  79 124  57]
   [ 15  98 119  50]
   [  6  60  83  16]]]


 [[[193 118  96 201]
   [195 164 155 182]
   [217 179 168 219]
   [105 163 148  95]]

  [[191 104  87 198]
   [185 137 128 171]
   [211 142 131 212]
   [139 135 118 128]]

  [[190 105  91 197]
   [184 134 126 169]
   [212 140 130 211]
   [153 127 111 144]]]


 [[[ 99 163 150 123]
   [149 175 185 162]
   [198 196 200 227]
   [211 191 203 230]]

  [[ 87 133 124 115]
   [132 145 157 150]
   [180 158 164 216]
   [201 155 172 228]]

  [[ 80 116 110 110]
   [122 130 142 141]
   [170 142 148 209]
   [196 140 160 223]]]


 ...


 [[[ 60 149 173 101]
   [102 194 200  77]
   [121 217 220  80]
   [ 34 200 181  28]]

  [[ 46 120 145  97]
   [ 79 156 165  65]
   [ 91 167 176  65]
   [ 27 150 142  24]]

  [[ 43 108 133  96]
   [ 69 139 150  61]
   [ 79 147 157  59]
   [ 25 130 127  23]]]


 [[[ 17 119 140  22]
   [ 20 150 163  83]
   [ 39 176 198 115]
   [ 20 112 182  53]]

  [[  9  76  94  13]
   [ 10 109 119  53]
   [ 22 118 141  76]
   [ 11  77 130  34]]

  [[  9  54  74  11]
   [  9  86  96  37]
   [ 16  90 112  53]
   [ 11  63 101  27]]]


 [[[ 38 129 147  49]
   [ 71 161 164  77]
   [ 85 184 190  94]
   [ 26 161 163  50]]

  [[ 37  84  98  44]
   [ 51 103 106  55]
   [ 59 117 121  70]
   [ 26 111 113  50]]

  [[ 29  66  78  35]
   [ 40  88  91  44]
   [ 48 100 106  58]
   [ 20  97  99  43]]]]
[]
******* test minibatch
[[[[ 50 100 159  37]
   [ 58 166 182  52]
   [141 212 197  50]
   [106 181 158  56]]

  [[ 39  71 119  32]
   [ 41 128 136  42]
   [117 160 143  39]
   [ 97 133 112  45]]

  [[ 24  45  89  21]
   [ 26 103 106  29]
   [100 129 111  26]
   [ 90 104  86  30]]]


 [[[ 99 163 157  83]
   [117 141 126 128]
   [115 153 139 133]
   [137 167 141 116]]

  [[ 59  82  76  46]
   [ 73  70  62  66]
   [ 73  72  63  70]
   [108  83  68  82]]

  [[ 41  60  52  30]
   [ 60  58  46  44]
   [ 60  61  47  47]
   [105  70  48  69]]]


 [[[113 143 135 162]
   [147 204 197 178]
   [158 210 201 184]
   [182 186 175 194]]

  [[ 61 108  99  69]
   [ 90 157 151  89]
   [ 76 156 149  74]
   [ 97 138 128 109]]

  [[ 50  91  82  56]
   [ 77 138 132  76]
   [ 65 137 129  63]
   [ 89 119 110 102]]]


 ...


 [[[158 107  91  40]
   [140 161 158  74]
   [199 181 180 106]
   [232 162 139  87]]

  [[162  83  68  38]
   [141 122 110  54]
   [205 144 123  74]
   [242 142  96  70]]

  [[155  73  60  37]
   [134 104  95  45]
   [196 123 107  60]
   [234 130  83  64]]]


 [[[ 51  33  29  33]
   [ 65  61  75  60]
   [ 98 141 149  86]
   [ 89 136 115 111]]

  [[ 48  28  25  27]
   [ 58  41  49  42]
   [ 87  88  93  63]
   [ 90  96  80  74]]

  [[ 49  28  25  25]
   [ 58  36  44  36]
   [ 87  76  80  53]
   [ 96  84  71  61]]]


 [[[ 34 103 130  77]
   [142 125 130  70]
   [156 151 140 105]
   [ 92 142  88 109]]

  [[ 29  85 108  84]
   [120 105 108  73]
   [129 124 116  98]
   [ 75 112  70 103]]

  [[ 18  53  67 109]
   [ 77  70  72  98]
   [ 82  87  84  72]
   [ 58  78  53  75]]]]
[]
******* test minibatch
[[[[102 211 228 138]
   [ 93 173 148 110]
   [ 75 182 152 154]
   [ 71 112  92 144]]

  [[104 196 204 129]
   [ 95 144 125  91]
   [ 82 141 114 126]
   [ 79  90  71 128]]

  [[ 90 194 202 128]
   [ 77 139 118  82]
   [ 61 132 101 114]
   [ 62  77  61 120]]]


 [[[ 20 120 150  58]
   [ 22 159 173  96]
   [ 23 163 190 140]
   [ 21  94 158 133]]

  [[ 22 101 118  47]
   [ 23 118 121  69]
   [ 23 124 136 100]
   [ 22  73 110 104]]

  [[ 27  78  80  34]
   [ 28  87  84  41]
   [ 29  89  91  63]
   [ 27  52  68  68]]]


 [[[ 26 173 186  30]
   [ 86 203 208  79]
   [109 223 229  81]
   [ 74 202 218  33]]

  [[ 15 130 140  13]
   [ 57 161 164  47]
   [ 76 172 175  52]
   [ 41 153 166  16]]

  [[ 12 111 120   9]
   [ 48 147 149  38]
   [ 64 153 157  45]
   [ 21 131 145  11]]]


 ...


 [[[ 40  89 107  29]
   [ 66 164 166  63]
   [ 73 183 181  71]
   [ 63 133 112  46]]

  [[ 33  67  79  23]
   [ 51 116 117  47]
   [ 58 124 122  54]
   [ 52  87  76  35]]

  [[ 26  56  65  17]
   [ 39  94  95  36]
   [ 44 101  97  42]
   [ 39  68  62  25]]]


 [[[133 146 117 123]
   [150 144 124 106]
   [143 166 139  99]
   [ 99 161 111 101]]

  [[106 103  77  97]
   [101  99  79  70]
   [ 93 109  85  63]
   [ 66 108  72  73]]

  [[ 82  83  59  69]
   [ 80  82  65  44]
   [ 74  91  69  39]
   [ 47  87  59  49]]]


 [[[152 178 202 153]
   [117 194 211 139]
   [132 206 231 150]
   [117 147 184 117]]

  [[134 138 167 129]
   [ 94 150 173 107]
   [ 98 157 193 117]
   [ 84 102 145  87]]

  [[122 109 144 106]
   [ 73 123 151  74]
   [ 61 131 175  79]
   [ 44  78 123  50]]]]
[]
******* test minibatch
[[[[126 167 177 158]
   [117 157 175 179]
   [111 171 213 182]
   [119 118 182 171]]

  [[173 125 141 119]
   [163 120 141 142]
   [150 128 156 146]
   [141  88 126 140]]

  [[166 106 119  88]
   [168 105 123 108]
   [151 111 137 116]
   [127  71 103 107]]]


 [[[118 218 198 176]
   [129 210 223 171]
   [125 225 232 179]
   [120 219 219 122]]

  [[ 92 183 156 135]
   [108 183 191 135]
   [104 180 186 141]
   [ 95 180 181  96]]

  [[ 62 156 133 103]
   [ 74 160 171 105]
   [ 76 155 163 111]
   [ 65 153 155  66]]]


 [[[129 206 182 113]
   [161 197 176 125]
   [161 204 181 117]
   [126 196 159  77]]

  [[ 89 170 147  77]
   [124 163 142  93]
   [118 162 138  78]
   [ 81 156 123  44]]

  [[ 80 150 130  71]
   [114 145 127  88]
   [111 147 124  76]
   [ 81 143 111  49]]]


 ...


 [[[102 109 163  63]
   [ 40 142 187 125]
   [ 45 156 212 181]
   [ 48  97 148 151]]

  [[ 78  77 121  48]
   [ 37 103 140  95]
   [ 42 110 155 136]
   [ 46  70 107 114]]

  [[ 48  67 116  48]
   [ 32  95 131  90]
   [ 38 102 144 125]
   [ 40  71 103 104]]]


 [[[101 155 131  93]
   [ 67 174 181 108]
   [ 82 190 202 140]
   [ 28 161 193 110]]

  [[ 86 120  93  60]
   [ 45 132 138  71]
   [ 60 139 151 101]
   [ 31 116 142  93]]

  [[ 70  97  61  34]
   [ 31 112 116  46]
   [ 47 121 130  78]
   [ 67 102 122  89]]]


 [[[104 103  95 127]
   [ 87 105  96  94]
   [ 91 114 107 100]
   [ 86  64  63  95]]

  [[ 81  69  64 108]
   [ 61  67  60  72]
   [ 66  67  62  78]
   [ 68  41  41  77]]

  [[ 84  57  54 114]
   [ 59  52  48  72]
   [ 62  50  48  77]
   [ 70  30  31  79]]]]
[]
Traceback (most recent call last):
  File "train_less.py", line 370, in <module>
    globals()[func_name](**func_params)
  File "train_less.py", line 319, in train_gan
    mb_train_out = D_train_fn(mb_reals, mb_labels, random_latents(minibatch_size, G.input_shape), random_labels(minibatch_size, training_set))
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/compile/function_module.py", line 884, in __call__
    self.fn() if output_subset is None else\
  File "/Users/mac/anaconda/lib/python2.7/site-packages/theano/gof/op.py", line 871, in rval
    def rval(p=p, i=node_input_storage, o=node_output_storage, n=node):
KeyboardInterrupt
